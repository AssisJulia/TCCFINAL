@page "/pontos"
@using SAMMI.Domain.DTOs.Pontuacao.Response
@using System.Net

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Ubuntu:wght@700&display=swap" rel="stylesheet">

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Lilita+One&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap" rel="stylesheet">

<RadzenCard Class="rz-my-12 rz-mx-auto" Style="width: 80%">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
        <RadzenStack Gap="0">
            <RadzenText Style="font-family: 'Ubuntu', sans-serif; font-size: 22px">Nome</RadzenText>
            <RadzenText Style="font-family: 'Lilita One', sans-serif; font-size: 36px"><b>@userName</b></RadzenText>
        </RadzenStack>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-2">
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                        Data="@pontuacoes" ColumnWidth="300px" SelectionMode="DataGridSelectionMode.Single">
            <Columns>
                <RadzenDataGridColumn Property="Data" Title="Data" Width="160px" />
                <RadzenDataGridColumn Property="TipoJogo" Title="Tipo do Jogo" Width="200px" />
                <RadzenDataGridColumn Property="Nivel" Title="Nível" Width="160px" />
                <RadzenDataGridColumn Property="QuantidadePontuacao" Title="Pontuação" FormatString="{0:d}" Width="160px" />                
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0">
        <a href="/home" class="rz-text-secondary-color">
            <RadzenButton Variant="Variant.Text" Text="Voltar" Style="color: black" />
        </a>
    </RadzenStack>
</RadzenCard>


@* <RadzenDataGrid Data="@pontuacao" TItem="Pontuacao"> 
    <Columns>
        <RadzenDataGridColumn TItem="Nome" Property="PontuacaoNome" Title="Jogador" />
        <RadzenDataGridColumn TItem="Data" Property="PontuacaoData" Title="Data" />
        <RadzenDataGridColumn TItem="Nivel" Property="PontuacaoNivel" Title="Nível" />
        <RadzenDataGridColumn TItem="Pontos" Property="PontuacaoPontos" Title="Pontos" />
    </Columns>
</RadzenDataGrid> *@


@code {
    private string userName = string.Empty;
    private List<ListarPontuacaoResponse>? pontuacoes = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadPontuacao();
            userName = await SessionStorage.GetItemAsync<string>("userName");
            StateHasChanged();
        }
    }

    private async Task loadPontuacao()
    {
        var response = await HttpClient.GetAsync("/pontuacao");

        if (response.StatusCode == HttpStatusCode.OK)
        {
            pontuacoes = await response.Content.ReadFromJsonAsync<List<ListarPontuacaoResponse>>();
        } 
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Problemas ao Listar Pontuação",
                    Detail = errorContent,
                    Duration = 4000
                }
            );
        }
    }

    // IEnumerable<Pontuacao> pontuacao;

    // protected override void OnInitialized()
    // {
    //     pontuacao = dbContext.Pontuacao.ToList();
    // }

}
